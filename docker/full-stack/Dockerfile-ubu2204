FROM ubuntu:latest AS base
LABEL maintainer="Frederico BedÃª <fredericot@ciandt.com>"

RUN apt-get update && \
  apt-get install -y \
  curl \
  tar \
  wget \
  git \
  unzip\
  python3-dev \
  python3-pip \
  python3-venv \
  qt5-qmake qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools python3-pyqt5

# Apps versions
ARG HELM_VERSION=v3.10.0
ENV HELM_DOCS_VERSION="1.14.2"
ARG KUBECTL_VERSION=v1.31.4
ARG YQ_VERSION=v4.40.5
ARG FLUX_CLI_VERSION=2.5.1
ARG ISTIO_VERSION=1.25.0
ARG PRODUCT=terraform
ARG VERSION=1.9.1
ARG VAULT_VERSION=1.14.10

ENV TMP_APPS_DIR=/tmp/apps/install

RUN mkdir -p ${TMP_APPS_DIR}

# Install helm
RUN curl -fsSL \ 
  https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz -o ${TMP_APPS_DIR}/helm.tar.gz && \
  tar -zxvf ${TMP_APPS_DIR}/helm.tar.gz -C ${TMP_APPS_DIR} && \
  mv ${TMP_APPS_DIR}/linux-amd64/helm /tmp/apps/

# Install helm-docs
RUN curl -fsSL\
  https://github.com/norwoodj/helm-docs/releases/download/v${HELM_DOCS_VERSION}/helm-docs_${HELM_DOCS_VERSION}_Linux_x86_64.tar.gz\
  -o ${TMP_APPS_DIR}/helm-docs.tar.gz &&\
  tar -zxvf ${TMP_APPS_DIR}/helm-docs.tar.gz -C ${TMP_APPS_DIR} &&\
  mv ${TMP_APPS_DIR}/helm-docs /tmp/apps/

# Download and install kubectl
RUN curl -fsSL \ 
  https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl -o ${TMP_APPS_DIR}/kubectl && \
  chmod +x ${TMP_APPS_DIR}/kubectl && \
  mv ${TMP_APPS_DIR}/kubectl /tmp/apps/

# Download and install yq
RUN wget -qO /tmp/apps/yq https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64 && \
  chmod +x /tmp/apps/yq

# Install kubens (and kubectx)
RUN git clone https://github.com/ahmetb/kubectx ${TMP_APPS_DIR}/kubectx && \
  chmod +x ${TMP_APPS_DIR}/kubectx/* && \
  mv ${TMP_APPS_DIR}/kubectx/kubectx ${TMP_APPS_DIR}/kubectx/kubens /tmp/apps/

# Install Flux CLI  
RUN curl -fsSL \ 
  https://github.com/fluxcd/flux2/releases/download/v${FLUX_CLI_VERSION}/flux_${FLUX_CLI_VERSION}_linux_amd64.tar.gz \
  -o ${TMP_APPS_DIR}/flux.tar.gz && \
  tar -zxvf ${TMP_APPS_DIR}/flux.tar.gz -C ${TMP_APPS_DIR} && \
  mv ${TMP_APPS_DIR}/flux /tmp/apps/

# Install IstioCtl
RUN curl -fsSL \ 
  https://github.com/istio/istio/releases/download/${ISTIO_VERSION}/istio-${ISTIO_VERSION}-linux-amd64.tar.gz \
  -o ${TMP_APPS_DIR}/istio.tar.gz && \
  tar -zxvf ${TMP_APPS_DIR}/istio.tar.gz -C ${TMP_APPS_DIR} && \
  mv ${TMP_APPS_DIR}/istio-${ISTIO_VERSION} /tmp/istio

# Install nektos/act
RUN curl -fsSL  https://github.com/nektos/act/releases/latest/download/act_Linux_x86_64.tar.gz \
  -o ${TMP_APPS_DIR}/act.tar.gz && \
  tar -zxvf ${TMP_APPS_DIR}/act.tar.gz -C ${TMP_APPS_DIR} && \
  mv ${TMP_APPS_DIR}/act /tmp/apps/

# Download and install terraform
RUN cd ${TMP_APPS_DIR} && \
  wget https://releases.hashicorp.com/${PRODUCT}/${VERSION}/${PRODUCT}_${VERSION}_linux_amd64.zip && \
  wget https://releases.hashicorp.com/${PRODUCT}/${VERSION}/${PRODUCT}_${VERSION}_SHA256SUMS && \
  wget https://releases.hashicorp.com/${PRODUCT}/${VERSION}/${PRODUCT}_${VERSION}_SHA256SUMS.sig && \
  wget -qO- https://www.hashicorp.com/.well-known/pgp-key.txt | gpg --import && \
  gpg --verify ${PRODUCT}_${VERSION}_SHA256SUMS.sig ${PRODUCT}_${VERSION}_SHA256SUMS && \
  grep ${PRODUCT}_${VERSION}_linux_amd64.zip ${PRODUCT}_${VERSION}_SHA256SUMS | sha256sum -c && \
  unzip ${TMP_APPS_DIR}/${PRODUCT}_${VERSION}_linux_amd64.zip -d /tmp/apps

# Download and install terraform docs
RUN curl -sSLo ${TMP_APPS_DIR}/terraform-docs.tar.gz https://terraform-docs.io/dl/v0.19.0/terraform-docs-v0.19.0-$(uname)-amd64.tar.gz && \
  tar -xzf ${TMP_APPS_DIR}/terraform-docs.tar.gz -C ${TMP_APPS_DIR} && \
  chmod +x ${TMP_APPS_DIR}/terraform-docs && \
  mv ${TMP_APPS_DIR}/terraform-docs /tmp/apps/

# Download and install vault cli
RUN curl -fsSL\
  https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip -o ${TMP_APPS_DIR}/vault.zip &&\
  unzip ${TMP_APPS_DIR}/vault.zip -d ${TMP_APPS_DIR}/ &&\
  mv ${TMP_APPS_DIR}/vault /tmp/apps/

ARG USER=nonroot
ARG UID=1003
ARG GID=1003
ENV VENV_DIR=/home/${USER}/.venv
  
RUN groupadd -g ${GID} ${USER} && \
  useradd ${USER} -m -d /home/${USER} -u ${UID} -g ${GID} 

RUN python3 -m venv ${VENV_DIR}

RUN . ${VENV_DIR}/bin/activate && \
  pip cache purge && \
  pip install --no-cache-dir \
    promptflow promptflow-tools promptflow-azure marshmallow==3.23.2 \
    https://storage.googleapis.com/flow-coder/coder-0.65-py3-none-any.whl

FROM ubuntu:22.04

RUN apt-get update && apt-get install -y \
  curl \
  tar \
  git \
  jq \
  python3 \
  python3-pip\
  openssh-client\
  sshpass\
  apache2-utils\
  iputils-ping\
  net-tools\
  dnsutils

# Install ansible
RUN apt update && \
  apt install -y software-properties-common && \
  add-apt-repository --yes --update ppa:ansible/ansible && \
  apt install -y ansible 

# Install docker
RUN install -m 0755 -d /etc/apt/keyrings &&\
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc &&\
  chmod a+r /etc/apt/keyrings/docker.asc &&\
  # Add the repository to Apt sources:
  echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  tee /etc/apt/sources.list.d/docker.list > /dev/null &&\
  apt-get update &&\
  apt-get install -y docker-ce-cli

# TFLint
RUN curl -fsSL \ 
  https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | \
  bash

# Az cli
RUN curl -sL https://aka.ms/InstallAzureCLIDeb | bash 

# Fix missing dependencies for coder
RUN apt-get update && \
  apt-get install -y\
  libgl1 \ 
  libnss3 \
  libxcomposite-dev \
  libxdamage1 \
  libxrender1 \
  libxrandr2 \
  libxtst6 \
  libxkbcommon-x11-0 \
  libasound2-dev \
  libfreetype6 \
  libfontconfig1 \
  libdbus-1-3 \
  libglib2.0-0

ARG USER=nonroot
ARG UID=1003
ARG GID=1003
ENV VENV_DIR=/home/${USER}/.venv

RUN useradd ${USER} -m -d /home/${USER} -u ${UID} -g ${GID} 

COPY --from=base tmp/apps /usr/local/bin
COPY --from=base /tmp/istio /home/${USER}/istio
COPY --from=base ${VENV_DIR} ${VENV_DIR}

RUN chown -R ${USER}:${USER} ${VENV_DIR} && \
  chown -R ${USER}:${USER} /home/${USER}/istio

USER ${USER}

WORKDIR /home/${USER}

RUN mkdir -p /home/${USER}/projects &&\
  mkdir -p /home/${USER}/.kube
  
VOLUME [ "/home/${USER}/projects", "/home/${USER}/.kube" ]

ENV PATH="${VENV_DIR}/bin:/home/${USER}/istio/bin:$PATH"

# docker build \
#   --platform linux/amd64 \
#   -t devcontainer:flux \
#   ~/MyProjects/personal/github/devcontainers-repo/docker/flux-viewer

# docker run \
#   --platform linux/amd64 \
#   -it \
#   --rm \
#   --name flux \
#   devcontainer:flux \
#   bash

# docker save devcontainer:flux | gzip > devcontainer-flux.tar.gz